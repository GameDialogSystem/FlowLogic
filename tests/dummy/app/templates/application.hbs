<div class="flow-navigation">
  <div class="flow-icon">
    <h1><span>FLow</span><span>Logic</span></h1>
  </div>

  <ul>
    <li>Documentation</li>
    <li>About</li>
    <li>Blog</li>
    <li>Github</li>
  </ul>
</div>

<div class="flow-content">
  <div class="flow-step">
    <div>
      <h2>Standing on the shoulders of giants</h2>
      <p>
        Most software depends on other libraries and software. At this point we
        want to honor the important ones that FlowLogic uses.
      </p>
    </div>
    <div class="flow-logos">
      <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Unofficial_JavaScript_logo_2.svg/2000px-Unofficial_JavaScript_logo_2.svg.png" alt="javascript" />
      <img src="https://www.emberjs.com/images/brand/ember_Ember-Light-e42a2b30.png" alt="ember data" />
      <img src="https://sass-lang.com/assets/img/styleguide/color-1c4aab2b.png" alt="sass" />
      <img src="https://avatars0.githubusercontent.com/u/13523395?s=200&v=4" alt="istanbul" />
      <img src="https://cdn.worldvectorlogo.com/logos/mocha-1.svg" alt="mocha" />
      <img src="https://camo.githubusercontent.com/431283cc1643d02167aac31067137897507c60fc/687474703a2f2f636861696a732e636f6d2f696d672f636861692d6c6f676f2e706e67" alt="chai" />
    </div>
  </div>
</div>

<div class="flow-content">
  <div class="flow-step">
    <div>
      <h2>Define your models</h2>
      <p>
        FlowLogic uses a model driven approach. To get things started you need to define custom models that define the data that forms the logic of your program. For example you want to create an application to manipulate image. A possible set of models for this
        purpose you can see on the right side
      </p>
      <h3>Block</h3>
      <p>
        To define your logic, you use the Block model to define logical components. For our image manipulation application
      </p>
      <h3>Connection</h3>
      <p>
        A connection connects two block and represents the data flow within your application.
      </p>

      <h3>Input</h3>
      <h3>Output</h3>
    </div>
    <div>
      {{#code-block language='javascript'}}
import DS from 'ember-data';
import FlowBlockModel from 'flow-logic/models/block';

export default FlowBlockModel.extend({
  // url to the image file that is going to be manipulated
  imageUrl: DS.attr('string'),

  // width of the image
  width: DS.attr('number'),

  // height of the image
  height: DS.attr('number')
});{{/code-block}}
    </div>
  </div>
</div>

<div class="flow-content">
  <div class="flow-step">
    <div>
      <h2>Add your logic</h2>
      <p>
        FlowLogic uses a model driven approach. To get things started you need to define custom models that define the data that forms the logic of your program. For example you want to create an application to manipulate image. A possible set of models for this
        purpose you can see on the right side
      </p>
    </div>
    <div>
      {{#code-block language='javascript'}}
import DS from 'ember-data';
import FlowBlockModel from 'flow-logic/models/block';

export default FlowBlockModel.extend({
  // url to the image file that is going to be manipulated
  imageUrl: DS.attr('string'),

  // width of the image
  width: DS.attr('number'),

  // height of the image
  height: DS.attr('number')
});{{/code-block}}
    </div>
  </div>
</div>

<div class="flow-content">
  <div class="flow-step">
    <div>
      <h2>Style your application</h2>
      <p>
        FlowLogic uses a model driven approach. To get things started you need to define custom models that define the data that forms the logic of your program. For example you want to create an application to manipulate image. A possible set of models for this
        purpose you can see on the right side
      </p>
    </div>
    <div>
      {{#code-block language='javascript'}}
import DS from 'ember-data';
import FlowBlockModel from 'flow-logic/models/block';

export default FlowBlockModel.extend({
  // url to the image file that is going to be manipulated
  imageUrl: DS.attr('string'),

  // width of the image
  width: DS.attr('number'),

  // height of the image
  height: DS.attr('number')
});{{/code-block}}
    </div>
  </div>
</div>


{{outlet}}
